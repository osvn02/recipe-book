{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16 \cb3\cf16 #include "menu.h"
\par \cb3\cf14\b using namespace \b0\cb3\cf16\b std\b0\cb3\cf25 ;
\par 
\par \cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 Menu\cb3\cf25 ()\{\}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 start\cb3\cf25 ()
\par \{
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Bienvenido al programa!" \cb3\cf25 << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \cb3\cf14\b do\b0\cb3\cf25 \{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nSeleccione una opcion:\\n"\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[a] Mostrar lista." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[b] Insertar receta." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[c] Mostrar receta." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[d] Borrar una receta." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[e] Ordenar lista." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[f] Modificar ingredientes de una receta." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[g] Modificar procedimiento de una receta." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[h] Borrar recetario." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[i] Leer recetario del disco." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[j] Escribir recetario al disco." \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "[s] Salir\\n-> "\cb3\cf25 ;
\par         \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par 
\par         \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par 
\par         \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par             \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 : \cb1\cf0 displayList\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 : \cb1\cf0 addRecipe\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'c'\cb3\cf25 : \cb1\cf0 displayRecipe\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'd'\cb3\cf25 : \cb1\cf0 removeRecipe\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'e'\cb3\cf25 : \cb1\cf0 sortList\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'f'\cb3\cf25 : \cb1\cf0 modifyIngredients\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'g'\cb3\cf25 : \cb1\cf0 modifyProcedure\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'h'\cb3\cf25 : \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 nullify\cb3\cf25 (); \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nLista borrada" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'i'\cb3\cf25 : \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 readFromDisk\cb3\cf25 (\cb3\cf20 "listado.txt"\cb3\cf25 ); \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nRecetario leido" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'j'\cb3\cf25 : \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 writeToDisk\cb3\cf25 (\cb3\cf20 "listado.txt"\cb3\cf25 ); \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nRecetario escrito" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 's'\cb3\cf25 : \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nHasta pronto!"\cb3\cf25 ; \cb1\cf0 getchar\cb3\cf25 (); \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \}
\par 
\par     \} \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 pick \cb3\cf25 != \cb3\cf22 's'\cb3\cf25 );
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 displayList\cb3\cf25 ()
\par \{
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ())\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "La lista se encuentra vacia" \cb3\cf25 << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b return\b0\cb3\cf25 ;
\par     \}
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nDesplegar:\\n[a]Toda la lista\\n[b]Desayunos\\n[c]Comidas\\n[d]Cenas\\n[e]Navidenos\\n->"\cb3\cf25 ;
\par     \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Lista actual:" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par     \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 :
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 toString\cb3\cf25 () << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 :
\par         \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb3\cf20 "Desayuno"\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 categoricToString\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByCategory\cb3\cf25 ) << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'c'\cb3\cf25 :
\par         \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb3\cf20 "Comida"\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 categoricToString\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByCategory\cb3\cf25 ) << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'd'\cb3\cf25 :
\par         \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb3\cf20 "Cena"\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 categoricToString\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByCategory\cb3\cf25 ) << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'e'\cb3\cf25 :
\par         \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb3\cf20 "Navideno"\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 categoricToString\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByCategory\cb3\cf25 ) << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \}
\par 
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 addRecipe\cb3\cf25 ()
\par \{
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb1\cf0 Name myName\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Position pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getLastPos\cb3\cf25 ();
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre del platillo: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nCategoria:\\n[a]Desayuno\\n[b]Comida\\n[c]Cena\\n[d]Navideno\\n-> "\cb3\cf25 ;
\par     \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par     \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par         \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Desayuno"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Comida"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \cb3\cf14\b case \b0\cb3\cf22 'c'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Cena"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \cb3\cf14\b case \b0\cb3\cf22 'd'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Navideno"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \cb3\cf14\b default\b0\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "s/c"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \}
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Tiempo de preparacion (en minutos): "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setPrepTime\cb3\cf25 (\cb1\cf0 stoi\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 ));
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre del autor: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myName\cb3\cf25 .\cb1\cf0 setFirst\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Apellido del autor: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myName\cb3\cf25 .\cb1\cf0 setLast\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setAuthor\cb3\cf25 (\cb1\cf0 myName\cb3\cf25 );
\par 
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setIngredients\cb3\cf25 (\cb1\cf0 addIngredients\cb3\cf25 ());
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Procedimiento: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setProcedure\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par     \cb3\cf14\b try\b0\cb3\cf25 \{
\par         \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 , \cb1\cf0 myRecipe\cb3\cf25 );
\par     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar receta: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \}
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 displayRecipe\cb3\cf25 ()
\par \{
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nSeleccione el criterio de busqueda:\\n[a]Nombre de la receta\\n[b]Categoria de la receta\\n-> "\cb3\cf25 ;
\par     \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par     \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par         \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 :
\par             \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre de la receta: "\cb3\cf25 ;
\par             \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par             \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par             \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par             \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 :
\par             \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nCategoria:\\n[a]Desayuno\\n[b]Comida\\n[c]Cena\\n[d]Navideno\\n-> "\cb3\cf25 ;
\par             \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par             \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par             \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par                 \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Desayuno"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Comida"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \cb3\cf14\b case \b0\cb3\cf22 'c'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Cena"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \cb3\cf14\b case \b0\cb3\cf22 'd'\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "Navideno"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \cb3\cf14\b default\b0\cb3\cf25 : \cb1\cf0 myStr \cb3\cf25 = \cb3\cf20 "s/c"\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \}
\par             \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setCategory\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par             \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByCategory\cb3\cf25 );
\par             \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \}
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nLa busqueda de " \cb3\cf25 << \cb1\cf0 myStr \cb3\cf25 << \cb3\cf20 " "\cb3\cf25 ;
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "no fue encontrada en la lista"\cb3\cf25 ;
\par     \}
\par     \cb3\cf14\b else\b0\cb3\cf25 \{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nSe muestra a continuacion: \\n" \cb3\cf25 << \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 )->\cb1\cf0 displayRecipe\cb3\cf25 () << \cb3\cf16\b endl \b0\cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \}
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 removeRecipe\cb3\cf25 ()
\par \{
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre de la receta: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par     \cb3\cf14\b try\b0\cb3\cf25 \{
\par         \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 deleteData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 );
\par     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al borrar receta: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \}
\par 
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 deleteList\cb3\cf25 ()
\par \{
\par     \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 nullify\cb3\cf25 ();
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Lista anulada" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 sortList\cb3\cf25 ()
\par \{
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Seleccione el criterio de ordenamiento:\\n[a]Nombre\\n[b]Tiempo de preparacion\\n->"\cb3\cf25 ;
\par     \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pick \cb3\cf25 == \cb3\cf22 'b'\cb3\cf25 )\{
\par         \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 sortList\cb3\cf25 (&\cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByPrepTime\cb3\cf25 );
\par     \}\cb3\cf14\b else\b0\cb3\cf25 \{
\par         \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 sortList\cb3\cf25 (&\cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par     \}
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 modifyIngredients\cb3\cf25 ()
\par \{
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb1\cf0 Ingredient myIngredient\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Position internalPos\cb3\cf25 ;
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nIngrese el nombre de la receta cuyos ingredientes desea modificar: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "No se encontro la receta buscada" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b return\b0\cb3\cf25 ;
\par     \}
\par     \cb1\cf0 myRecipe \cb3\cf25 = *(\cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ));
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 > \cb1\cf0 myIngredients \cb3\cf25 = \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 getIngredients\cb3\cf25 ();
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 displayRecipe\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nSeleccione una opcion:\\n[a]Agregar un ingrediente\\n[b]Eliminar un ingrediente\\n[c]Modificar la cantidad de un ingrediente\\n[d]Borrar todos los ingredientes\\n->"\cb3\cf25 ;
\par     \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par     \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par     \cb3\cf14\b case \b0\cb3\cf22 'a'\cb3\cf25 :
\par         \cb1\cf0 myIngredients \cb3\cf25 = \cb1\cf0 addIngredients\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 getIngredients\cb3\cf25 ());
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'b'\cb3\cf25 :
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nIngrese el nombre del ingrediente que desea borrar: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 internalPos \cb3\cf25 = \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myIngredient\cb3\cf25 , \cb1\cf0 Ingredient\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par         \cb3\cf14\b try\b0\cb3\cf25 \{
\par             \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 deleteData\cb3\cf25 (\cb1\cf0 internalPos\cb3\cf25 );
\par         \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par             \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al borrar receta: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \}
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'c'\cb3\cf25 :
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nIngrese el nombre del ingrediente que desea modificar: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nuevo nombre de la unidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setUnit\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nueva cantidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setQuantity\cb3\cf25 (\cb1\cf0 stoi\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 ));
\par         \cb1\cf0 internalPos \cb3\cf25 = \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myIngredient\cb3\cf25 , \cb1\cf0 Ingredient\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par         \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 internalPos\cb3\cf25 , \cb1\cf0 myIngredient\cb3\cf25 );
\par         \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 deleteData\cb3\cf25 (\cb1\cf0 internalPos\cb3\cf25 );
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b case \b0\cb3\cf22 'd'\cb3\cf25 :
\par         \cb1\cf0 myIngredients\cb3\cf25 .\cb1\cf0 nullify\cb3\cf25 ();
\par         \cb3\cf14\b break\b0\cb3\cf25 ;
\par     \cb3\cf14\b default\b0\cb3\cf25 :
\par         \cb3\cf14\b return\b0\cb3\cf25 ;
\par     \}
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setIngredients\cb3\cf25 (\cb1\cf0 myIngredients\cb3\cf25 );
\par     *(\cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 )) = \cb1\cf0 myRecipe\cb3\cf25 ;
\par \}
\par 
\par \cb3\cf14\b void \b0\cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 modifyProcedure\cb3\cf25 ()
\par \{
\par     \cb1\cf0 Recipe myRecipe\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb1\cf0 DLList\cb3\cf25 <\cb1\cf0 Recipe\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "\\nIngrese el nombre de la receta cuyo procedimiento desea modificar: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 findData\cb3\cf25 (\cb1\cf0 myRecipe\cb3\cf25 , \cb1\cf0 Recipe\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 );
\par     \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "No se encontro la receta buscada" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par         \cb3\cf14\b return\b0\cb3\cf25 ;
\par     \}
\par     \cb1\cf0 myRecipe \cb3\cf25 = *(\cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ));
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nuevo procedimiento: "\cb3\cf25 ;
\par     \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par     \cb1\cf0 myRecipe\cb3\cf25 .\cb1\cf0 setProcedure\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par     *(\cb1\cf0 recipeList\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 )) = \cb1\cf0 myRecipe\cb3\cf25 ;
\par \}
\par 
\par \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 > \cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 addIngredients\cb3\cf25 () \cb3\cf14\b const
\par \b0\cb3\cf25 \{
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 > \cb1\cf0 result\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf14\b bool \b0\cb1\cf0 flag\cb3\cf25 ;
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 comparison\cb3\cf25 ;
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "A continuacion ingrese los ingredientes" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \cb3\cf14\b do\b0\cb3\cf25 \{
\par         \cb1\cf0 Ingredient myIngredient\cb3\cf25 ;
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre del ingrediente: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre de la unidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setUnit\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Cantidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setQuantity\cb3\cf25 (\cb1\cf0 stoi\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 ));
\par 
\par         \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getFirstPos\cb3\cf25 ();
\par 
\par         \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par             \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par                 \cb1\cf0 comparison \cb3\cf25 = \cb1\cf0 Ingredient\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 (\cb1\cf0 myIngredient\cb3\cf25 , \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ));
\par                 \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 comparison \cb3\cf25 < \cb3\cf12 0\cb3\cf25 )\{
\par                     \cb3\cf14\b try\b0\cb3\cf25 \{
\par                         \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 result\cb3\cf25 .\cb1\cf0 getPrevPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ), \cb1\cf0 myIngredient\cb3\cf25 );
\par                     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par                     \}
\par                     \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \}
\par 
\par                 \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 result\cb3\cf25 .\cb1\cf0 getNextPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ) == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par                     \cb3\cf14\b try\b0\cb3\cf25 \{
\par                         \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 , \cb1\cf0 myIngredient\cb3\cf25 );
\par                     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par                     \}
\par                     \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \}
\par                 \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getNextPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 );
\par             \}
\par         \}
\par         \cb3\cf14\b else\b0\cb3\cf25 \{
\par             \cb3\cf14\b try\b0\cb3\cf25 \{
\par                 \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 , \cb1\cf0 myIngredient\cb3\cf25 );
\par             \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                 \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par             \}
\par         \}
\par 
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingresar otro ingrediente?(s/n): "\cb3\cf25 ;
\par         \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par         \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par         \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par             \cb3\cf14\b case \b0\cb3\cf22 's'\cb3\cf25 : \cb1\cf0 flag \cb3\cf25 = \cb3\cf14\b true\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'n'\cb3\cf25 : \cb1\cf0 flag \cb3\cf25 = \cb3\cf14\b false\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \}
\par     \}\cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 flag\cb3\cf25 );
\par     \cb3\cf14\b return \b0\cb1\cf0 result\cb3\cf25 ;
\par \}
\par 
\par \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 > \cb1\cf0 Menu\cb3\cf25 ::\cb1\cf0 addIngredients\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >& \cb1\cf0 current\cb3\cf25 ) \cb3\cf14\b const
\par \b0\cb3\cf25 \{
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 > \cb1\cf0 result \cb3\cf25 = \cb1\cf0 current\cb3\cf25 ;
\par     \cb3\cf16\b string \b0\cb1\cf0 myStr\cb3\cf25 ;
\par     \cb3\cf14\b char \b0\cb1\cf0 pick\cb3\cf25 ;
\par     \cb3\cf14\b bool \b0\cb1\cf0 flag\cb3\cf25 ;
\par     \cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Position pos\cb3\cf25 ;
\par     \cb3\cf14\b int \b0\cb1\cf0 comparison\cb3\cf25 ;
\par 
\par     \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "A continuacion ingrese los ingredientes" \cb3\cf25 << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par     \cb3\cf14\b do\b0\cb3\cf25 \{
\par         \cb1\cf0 Ingredient myIngredient\cb3\cf25 ;
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre del ingrediente: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setName\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Nombre de la unidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setUnit\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 );
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Cantidad: "\cb3\cf25 ;
\par         \cb1\cf0 getline\cb3\cf25 (\cb3\cf16\b cin\b0\cb3\cf25 , \cb1\cf0 myStr\cb3\cf25 );
\par         \cb1\cf0 myIngredient\cb3\cf25 .\cb1\cf0 setQuantity\cb3\cf25 (\cb1\cf0 stoi\cb3\cf25 (\cb1\cf0 myStr\cb3\cf25 ));
\par 
\par         \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getFirstPos\cb3\cf25 ();
\par 
\par         \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par             \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 pos \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par                 \cb1\cf0 comparison \cb3\cf25 = \cb1\cf0 Ingredient\cb3\cf25 ::\cb1\cf0 compareByName\cb3\cf25 (\cb1\cf0 myIngredient\cb3\cf25 , \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getElement\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ));
\par                 \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 comparison \cb3\cf25 < \cb3\cf12 0\cb3\cf25 )\{
\par                     \cb3\cf14\b try\b0\cb3\cf25 \{
\par                         \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 result\cb3\cf25 .\cb1\cf0 getPrevPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ), \cb1\cf0 myIngredient\cb3\cf25 );
\par                     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par                     \}
\par                     \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \}
\par 
\par                 \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 result\cb3\cf25 .\cb1\cf0 getNextPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 ) == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par                     \cb3\cf14\b try\b0\cb3\cf25 \{
\par                         \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 , \cb1\cf0 myIngredient\cb3\cf25 );
\par                     \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par                     \}
\par                     \cb3\cf14\b break\b0\cb3\cf25 ;
\par                 \}
\par                 \cb1\cf0 pos \cb3\cf25 = \cb1\cf0 result\cb3\cf25 .\cb1\cf0 getNextPos\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 );
\par             \}
\par         \}
\par         \cb3\cf14\b else\b0\cb3\cf25 \{
\par             \cb3\cf14\b try\b0\cb3\cf25 \{
\par                 \cb1\cf0 result\cb3\cf25 .\cb1\cf0 insertData\cb3\cf25 (\cb1\cf0 pos\cb3\cf25 , \cb1\cf0 myIngredient\cb3\cf25 );
\par             \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 SLList\cb3\cf25 <\cb1\cf0 Ingredient\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par                 \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Error al ingresar ingrediente: " \cb3\cf25 << \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 () << \cb3\cf16\b endl\b0\cb3\cf25 ;
\par             \}
\par         \}
\par 
\par         \cb3\cf16\b cout \b0\cb3\cf25 << \cb3\cf20 "Ingresar otro ingrediente?(s/n): "\cb3\cf25 ;
\par         \cb3\cf16\b cin \b0\cb3\cf25 >> \cb1\cf0 pick\cb3\cf25 ;
\par         \cb3\cf16\b cin\b0\cb3\cf25 .\cb1\cf0 ignore\cb3\cf25 ();
\par         \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 pick\cb3\cf25 )\{
\par             \cb3\cf14\b case \b0\cb3\cf22 's'\cb3\cf25 : \cb1\cf0 flag \cb3\cf25 = \cb3\cf14\b true\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par             \cb3\cf14\b case \b0\cb3\cf22 'n'\cb3\cf25 : \cb1\cf0 flag \cb3\cf25 = \cb3\cf14\b false\b0\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par         \}
\par     \}\cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 flag\cb3\cf25 );
\par     \cb3\cf14\b return \b0\cb1\cf0 result\cb3\cf25 ;
\par \}
\par }